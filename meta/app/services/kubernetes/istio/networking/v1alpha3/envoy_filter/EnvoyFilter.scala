package services.kubernetes.istio.networking.v1alpha3.envoy_filter

import skuber.ResourceSpecification.{Names, Scope}
import skuber._

/** `EnvoyFilter` describes Envoy proxy-specific filters that can be used to
  * customize the Envoy proxy configuration generated by Istio networking
  * subsystem (Pilot). This feature must be used with care, as incorrect
  * configurations could potentially destabilize the entire mesh.
  *
  * NOTE 1: Since this is break glass configuration, there will not be any
  * backward compatibility across different Istio releases. In other words,
  * this configuration is subject to change based on internal implementation
  * of Istio networking subsystem.
  *
  * NOTE 2: When multiple EnvoyFilters are bound to the same workload, all filter
  * configurations will be processed sequentially in order of creation time.
  * The behavior is undefined if multiple EnvoyFilter configurations conflict
  * with each other.
  *
  * The following example for Kubernetes enables Envoy's Lua filter for all
  * inbound calls arriving at service port 8080 of the reviews service pod with
  * labels "app: reviews".
  *
  * ```yaml
  * apiVersion: networking.istio.io/v1alpha3
  * kind: EnvoyFilter
  * metadata:
  *   name: reviews-lua
  * spec:
  *   workloadLabels:
  *     app: reviews
  *   filters:
  *   - listenerMatch:
  *       portNumber: 8080
  *       listenerType: SIDECAR_INBOUND #will match with the inbound listener for reviews:8080
  *     filterName: envoy.lua
  *     filterType: HTTP
  *     filterConfig:
  *       inlineCode: |
  *         ... lua code ...
  * ```
  *
  * @param workloadLabels
  *   One or more labels that indicate a specific set of pods/VMs whose
  *   proxies should be configured to use these additional filters.  The
  *   scope of label search is platform dependent. On Kubernetes, for
  *   example, the scope includes pods running in all reachable
  *   namespaces. Omitting the selector applies the filter to all proxies in
  *   the mesh.
  *   NOTE: There can be only one EnvoyFilter bound to a specific workload.
  *   The behavior is undefined if multiple EnvoyFilter configurations are
  *   specified for the same workload.
  * @param filters
  *   REQUIRED: Envoy network filters/http filters to be added to matching
  *   listeners.  When adding network filters to http connections, care
  *   should be taken to ensure that the filter is added before
  *   envoy.http_connection_manager.
  */
case class EnvoyFilter(
  val kind: String = "EnvoyFilter",
  override val apiVersion: String = "networking.istio.io/v1alpha3",
  val metadata: ObjectMeta = ObjectMeta(),
  spec: Option[EnvoyFilter.Spec] = None
) extends ObjectResource

object EnvoyFilter {
  case class Spec(
    workloadLabels: Map[String,String] = Map.empty,
    filters: List[EnvoyFilter.Filter] = Nil
  )

  val specification=NonCoreResourceSpecification(
    apiGroup = "networking.istio.io",
    version = "v1alpha3",
    scope = Scope.Namespaced,
    names = Names(
      plural = "envoyfilters",
      singular = "envoyfilter",
      kind = "EnvoyFilter",
      shortNames = List()
    )
  )
  implicit val envoyFilterDef = new ResourceDefinition[EnvoyFilter] { def spec=specification }
  implicit val envoyFilterListDef = new ResourceDefinition[ListResource[EnvoyFilter]] { def spec=specification }
  
  /** Select a listener to add the filter to based on the match conditions.
  * All conditions specified in the ListenerMatch must be met for the filter
  * to be applied to a listener.
  *
  * @param portNumber
  *   The service port/gateway port to which traffic is being
  *   sent/received. If not specified, matches all listeners. Even though
  *   inbound listeners are generated for the instance/pod ports, only
  *   service ports should be used to match listeners.
  * @param portNamePrefix
  *   Instead of using specific port numbers, a set of ports matching a
  *   given port name prefix can be selected. E.g., "mongo" selects ports
  *   named mongo-port, mongo, mongoDB, MONGO, etc. Matching is case
  *   insensitive.
  * @param listenerType
  *   Inbound vs outbound sidecar listener or gateway listener. If not specified,
  *   matches all listeners.
  * @param listenerProtocol
  *   Selects a class of listeners for the same protocol. If not
  *   specified, applies to listeners on all protocols. Use the protocol
  *   selection to select all HTTP listeners (includes HTTP2/gRPC/HTTPS
  *   where Envoy terminates TLS) or all TCP listeners (includes HTTPS
  *   passthrough using SNI).
  * @param address
  *   One or more IP addresses to which the listener is bound. If
  *   specified, should match at least one address in the list.
  */
  case class ListenerMatch(
    portNumber: Int = 0,
    portNamePrefix: String = "",
    listenerType: EnvoyFilter.ListenerMatch.ListenerType.ListenerType = EnvoyFilter.ListenerMatch.ListenerType.ANY,
    listenerProtocol: EnvoyFilter.ListenerMatch.ListenerProtocol.ListenerProtocol = EnvoyFilter.ListenerMatch.ListenerProtocol.ALL,
    address: List[String] = Nil
  )
  
  object ListenerMatch {

    object ListenerType extends Enumeration {
      type ListenerType = Value
      val ANY, SIDECAR_INBOUND, SIDECAR_OUTBOUND, GATEWAY = Value
    }

    object ListenerProtocol extends Enumeration {
      type ListenerProtocol = Value
      val ALL, HTTP, TCP = Value
    }
  }
  
  /** Indicates the relative index in the filter chain where the filter should be inserted.
    *
    * @param index
    *   Position of this filter in the filter chain.
    * @param relativeTo
    *   If BEFORE or AFTER position is specified, specify the name of the
    *   filter relative to which this filter should be inserted.
    */
  case class InsertPosition(
    index: EnvoyFilter.InsertPosition.Index.Index = EnvoyFilter.InsertPosition.Index.FIRST,
    relativeTo: String = ""
  )
  
  object InsertPosition {
    object Index extends Enumeration {
      type Index = Value
      val FIRST, LAST, BEFORE, AFTER = Value
    }
  }
  
  /** Envoy filters to be added to a network or http filter chain.
    *
    * @param listenerMatch
    *   Filter will be added to the listener only if the match conditions are true.
    *   If not specified, the filters will be applied to all listeners.
    * @param insertPosition
    *   Insert position in the filter chain. Defaults to FIRST
    * @param filterType
    *   REQUIRED: The type of filter to instantiate.
    * @param filterName
    *   REQUIRED: The name of the filter to instantiate. The name must match a supported
    *   filter _compiled into_ Envoy.
    * @param filterConfig
    *   REQUIRED: Filter specific configuration which depends on the filter being
    *   instantiated.
    */
  case class Filter(
    listenerMatch: Option[EnvoyFilter.ListenerMatch] = None,
    insertPosition: Option[EnvoyFilter.InsertPosition.Index.Index] = None,
    filterType: EnvoyFilter.Filter.FilterType.FilterType = EnvoyFilter.Filter.FilterType.INVALID,
    filterName: String = "",
    filterConfig: Option[play.api.libs.json.JsValue] = None
  )
  
  object Filter {
    object FilterType extends Enumeration {
      type FilterType = Value
      val INVALID, HTTP, NETWORK = Value
    }
  }
}
